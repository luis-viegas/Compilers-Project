PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;
TOKENS_ARE_NODES = false;

SKIP : " " | "\t" | "\r" | "\n";

TOKEN :
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< EQUAL : "="> |
	< NEGATION : "!"> |
	< INTEGER : (["0" - "9"])+ > |
    <STRING: "String"> |
    <MAIN: "main"> |
    <VOID: "void"> |
    <IF : "if"> |
    <ELSE : "else"> |
    <WHILE : "while"> |
    <STATIC: "static"> |
    <RETURN: "return" > |
    <PUBLIC: "public"> |
    <EXTENDS: "extends"> |
    < LENGTH : "length"> |
    < CLASS: "class" > |
    < IMPORT : "import" > |
    < TRUE : "true"> |
    < FALSE : "false"> |
    < THIS : "this"> |
    < NEW : "new"> |
	< SEMICOLON : ";" > |
	< COLON : "." > |
	< INT : "int"> |
	< BOOLEAN : "boolean"> |
	< LEFTSQUAREBRACKET : "["> |
    < RIGHTSQUAREBRACKET : "]"> |
    < LEFTBRACKET : "{"> |
    < RIGHTBRACKET : "}"> |
    < LEFTPARENTHESIS: "("> |
    < RIGHTPARENTHESIS: ")"> |
    < COMMA: "," > |
    < WORD : ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","0"-"9","_"])* >
;

Start : Program ;

Type:
    (
        < INT > |
        < LEFTSQUAREBRACKET >
        < RIGHTSQUAREBRACKET >
    ) |
    < BOOLEAN > |
    < INT > |
    < WORD >
;

ImportDeclaration:
    (
        < IMPORT >
        < WORD >
        (<COLON> <WORD>)*
        < SEMICOLON >
    )*
;

ClassDeclaration:
    <CLASS>
    <WORD>
    (<EXTENDS> <WORD> )?
    <LEFTBRACKET>
    (VarDeclaration)*
    (MethodDeclaration)*
    <RIGHTBRACKET>
;

VarDeclaration :
    Type
    < WORD >
    < SEMICOLON>
;

MethodDeclaration:
    <PUBLIC>
    (NormalFunction |
    MainFunction)
;

MainFunction:
    <STATIC><VOID><MAIN>
    <LEFTPARENTHESIS>
    <STRING>
    <LEFTSQUAREBRACKET>
    <RIGHTSQUAREBRACKET>
    <WORD>
    <RIGHTPARENTHESIS>
    <LEFTBRACKET>
    (VarDeclaration)*
    (Statement)*
    <RIGHTBRACKET>
;

NormalFunction:
    Type
    <WORD>
    <LEFTPARENTHESIS>
    (
        Type
        <WORD>
        (
            <COMMA>
            Type
            <WORD>
        )*
    )?
    <RIGHTPARENTHESIS>
    <LEFTBRACKET>
    (VarDeclaration)*
    (Statement)*
    <RETURN>
    Expression
    <SEMICOLON>
    <RIGHTBRACKET>
;

Addv2 #void:
    ExprTerm ( (< PLUS > ExprTerm) ({jjtThis.put("op", "add");}) #BinOp(2)
    | (< MINUS > ExprTerm) ({jjtThis.put("op", "sub");}) #BinOp(2)  )*
;

ExprTerm #void:
    (<INTEGER> {jjtThis.put("value", lastConsumedToken.getImage());} ) #IntLiteral
;

Expression:
    SCAN 2
    <INTEGER> |
    <TRUE> |
    <FALSE> |
    <THIS> |
    ExpressionColon |
    (<NEW> ExpressionNew) |
    (<NEGATION> Expression) |
    ExpressionBetweenParenthesis |
    ExpressionArray |
    AdditiveExpression #Expressaologica |
    <WORD>
;

AdditiveExpression #void:
    MultiplicativeExpression
    (
          ( (<PLUS> MultiplicativeExpression) ({jjtThis.put("op", "add");}) #BinOp(2) ) |
          ( (<MINUS> MultiplicativeExpression) ({jjtThis.put("op", "subtract");}) #BinOp(2) )
    )*
;


/*
SubtractionExpression:
    <MINUS>
    MultiplicativeExpression
    ({jjtThis.put("op","subtract");})
    #BinOp(2))
;
*/


MultiplicativeExpression #void:
    Factor
    (
         ( (<TIMES> Factor) ({jjtThis.put("op", "multiplication");}) #BinOp(2) ) |
         ( (<DIVIDE> Factor) ({jjtThis.put("op", "division");}) #BinOp(2) )
    )*
;

Factor #void:
    (<INTEGER> {jjtThis.put("value", lastConsumedToken.getImage());} ) #IntLiteral |
    <MINUS> Factor |
    <LEFTPARENTHESIS> AdditiveExpression <RIGHTPARENTHESIS>
;

ExpressionArray:
    (<WORD> | ExpressionBetweenParenthesis | ExpressionColon)
    <LEFTSQUAREBRACKET>
    Expression
    <RIGHTSQUAREBRACKET>
;


ExpressionBetweenParenthesis:
    <LEFTPARENTHESIS>
    Expression
    <RIGHTPARENTHESIS>
;

ExpressionColon:
    (<THIS> | <WORD> | ExpressionBetweenParenthesis)
    ((<COLON> <LENGTH>) |
    (
        <WORD>
        <LEFTPARENTHESIS>
        (
            Expression
            (<COMMA> Expression)*
        )?
        <RIGHTPARENTHESIS>
    ))
;

ExpressionNew:
    ( <INT> <LEFTSQUAREBRACKET> Expression <RIGHTSQUAREBRACKET>) |
    (<WORD> <LEFTPARENTHESIS><RIGHTPARENTHESIS>)
;

Statement:
    (
        <WORD>
        (( <EQUAL> Expression) |
        (
            <LEFTSQUAREBRACKET>
            Expression
            <RIGHTSQUAREBRACKET>
            <EQUAL>
            Expression
        ))
        <SEMICOLON>
    ) |
    (<LEFTBRACKET> Statement <RIGHTBRACKET>) |
    IfStatement |
    WhileStatement |
    (Expression <SEMICOLON>)
;

IfStatement:
    <IF>
    <LEFTPARENTHESIS>
    Expression
    <RIGHTPARENTHESIS>
    Statement
    <ELSE>
    Statement
;

WhileStatement:
    <WHILE>
    <LEFTPARENTHESIS>
    Expression
    <RIGHTPARENTHESIS>
    Statement
;

Program:
    ImportDeclaration
    ClassDeclaration
    <EOF> ;




INJECT BaseNode :
		import pt.up.fe.comp.jmm.ast.JmmNode;
		import pt.up.fe.comp.jmm.ast.AJmmNode;
		import pt.up.fe.specs.util.SpecsCollections;
		extends AJmmNode
{
    @Override
    public List<JmmNode> getChildren() {

        return SpecsCollections.cast(children(), JmmNode.class);
    }

    @Override
    public void add(JmmNode child, int index) {

        if (child instanceof Node) {

            addChild(index, (Node) child);
        } else {

            throw new RuntimeException("Node " + child + " is not a Node.");
        }

    }
}
