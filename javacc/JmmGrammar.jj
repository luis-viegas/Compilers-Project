PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;

SKIP : " " | "\t" | "\r" | "\n";

TOKEN :
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< OPEN_PAREN : "(" > |
	< CLOSE_PAREN : ")" > |
	< INTEGER : (["0" - "9"])+ > |

    <STRING: "string"> |
    <MAIN: "main"> |
    <VOID: "void"> |
    <STATIC: "static"> |
    <RETURN: "return" > |
    <PUBLIC: "public"> |
    <EXTENDS: "extends"> |
    < CLASS: "class" > |
    < IMPORT : "import" > |
	< WORD : ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","0"-"9","_"])* > |
	< SEMICOLON : ";" > |
	< COLON : "." > |
	< INT : "int"> |
	<BOOLEAN : "boolean"> |
	< LEFTSQUAREBRACKET : "["> |
    < RIGHTSQUAREBRACKET : "]"> |
    < LEFTBRACKET : "{"> |
    < RIGHTBRACKET : "}"> |
    < LEFTPARENTHESIS: "("> |
    < RIGHTPARENTHESIS: ")"> |
    < COMMA: "," >
;

Start : Program ;

AdditiveExpression :
	MultiplicativeExpression
	(
		(< PLUS > | < MINUS >)
		MultiplicativeExpression
	)?
;

MultiplicativeExpression :
	Factor
	(
		(< TIMES > | < DIVIDE >)
		Factor
	)?
;

Factor :
	< INTEGER > |
	< MINUS> Factor |
	< OPEN_PAREN > AdditiveExpression < CLOSE_PAREN >
;


Type:
    (
        < INT > |
        < LEFTSQUAREBRACKET >
        < RIGHTSQUAREBRACKET >
    ) |
    < BOOLEAN > |
    < INT > |
    < WORD >
;

ImportDeclaration:
    (
        < IMPORT >
        < WORD >
        (
          < COLON >
          < WORD>
        )*
        < SEMICOLON >
    )*
;

ClassDeclaration:
    <CLASS>
    <WORD>
    (
        <EXTENDS>
        <WORD>
    )?
    <LEFTBRACKET>
    (
    VarDeclaration
    )*
    (
    MethodDeclaration
    )*
    <RIGHTBRACKET>
;

VarDeclaration :
    Type
    < WORD >
    < SEMICOLON>
;

MethodDeclaration:
    <PUBLIC>
    (
    Type
    <WORD>
    <LEFTPARENTHESIS>
    (
    Type
    <WORD>
    (
    <COMMA>
    Type
    <WORD>
    )*
    )?
    <RIGHTPARENTHESIS>
    <LEFTBRACKET>
    (
    VarDeclaration
    )*
    (
    Statement
    )*
    <RETURN>
    Expression
    <SEMICOLON>
    <RIGHTBRACKET>
    )
    |
    <STATIC>
    <VOID>
    <MAIN>
    <LEFTPARENTHESIS>
    <STRING>
    <LEFTSQUAREBRACKET>
    <RIGHTSQUAREBRACKET>
    <WORD>
    <RIGHTPARENTHESIS>
    <LEFTBRACKET>
    (
    VarDeclaration
    )*
    (
    Statement
    )*
    <RIGHTBRACKET>
;

Expression:
<WORD>
;

Statement:
<WORD>
;

Program:
    ImportDeclaration
    ClassDeclaration
    <EOF> ;