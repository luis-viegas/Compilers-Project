PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;
TOKENS_ARE_NODES = false;

SKIP : " " | "\t" | "\r" | "\n" | < "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") > | < "/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/" >;

TOKEN :
    < LESS : "<" > |
    < AND : "&&" > |
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< EQUAL : "="> |
	< NOT : "!"> |
	< INTEGER : (["0" - "9"])+ > |
    <STRING: "String"> |
    <MAIN: "main"> |
    <VOID: "void"> |
    <IF : "if"> |
    <ELSE : "else"> |
    <WHILE : "while"> |
    <STATIC: "static"> |
    <RETURN: "return" > |
    <PUBLIC: "public"> |
    <EXTENDS: "extends"> |
    < LENGTH : "length"> |
    < CLASS: "class" > |
    < IMPORT : "import" > |
    < TRUE : "true"> |
    < FALSE : "false"> |
    < THIS : "this"> |
    < NEW : "new"> |
	< SEMICOLON : ";" > |
	< POINT : "." > |
	< INT : "int"> |
	< BOOLEAN : "boolean"> |
	< LEFTSQUAREBRACKET : "["> |
    < RIGHTSQUAREBRACKET : "]"> |
    < LEFTBRACKET : "{"> |
    < RIGHTBRACKET : "}"> |
    < LEFTPARENTHESIS: "("> |
    < RIGHTPARENTHESIS: ")"> |
    < COMMA: "," > |
    < WORD : ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","0"-"9","_"])* >
;

Start : Program ;

Program:
    (ImportDeclaration)*
    ClassDeclaration
    <EOF> ;

 ImportDeclaration :
         < IMPORT >
         FirstImportID
         (ImportID)*
         < SEMICOLON >
 ;

FirstImportID #id :
    <WORD> {jjtThis.put("value", lastConsumedToken.getImage());}
;


ImportID #id :
    <POINT>
    <WORD> {jjtThis.put("value", lastConsumedToken.getImage());}
;

ClassDeclaration:
    <CLASS>
    <WORD> {jjtThis.put("className", lastConsumedToken.getImage());}
    (<EXTENDS> <WORD> {jjtThis.put("classExtends", lastConsumedToken.getImage());})?
    <LEFTBRACKET>
    (VarDeclaration)*
    (MethodDeclaration)*
    <RIGHTBRACKET>
;

VarDeclaration :
    Type
    < WORD > {jjtThis.put("id", lastConsumedToken.getImage());}
    < SEMICOLON>
;

MethodDeclaration #void:
    <PUBLIC>
    (NormalFunction | MainFunction)
;

MainFunction #Function:
    <STATIC> {jjtThis.put("isStatic", "true"); jjtThis.put("Return", "void");}
    (<VOID> {jjtThis.put("tipo", "void");jjtThis.put("isArray", "false");}) #Type
    <MAIN> {jjtThis.put("functionName", lastConsumedToken.getImage());}
    <LEFTPARENTHESIS>
    (MainArgs)
    ( <WORD> {jjtThis.put("id", lastConsumedToken.getImage());}) #param(1)
    <RIGHTPARENTHESIS>
    <LEFTBRACKET>
    (SCAN 2 VarDeclaration)*
    (Statement)*
    <RIGHTBRACKET>
;

MainArgs #Type:
    <STRING> <LEFTSQUAREBRACKET> <RIGHTSQUAREBRACKET> {jjtThis.put("tipo", "String"); jjtThis.put("isArray", "true");}
;

/*
Argument:
    Type
    <WORD> {jjtThis.put("id", lastConsumedToken.getImage());}
;
*/

Arguments #void:
    (Type
    <WORD> {jjtThis.put("id", lastConsumedToken.getImage());}) #param(1)
    (
        (<COMMA>
        Type
        <WORD> {jjtThis.put("id", lastConsumedToken.getImage());}) #param(1)
    )*
;

NormalFunction #Function:
    Type {jjtThis.put("Return", lastConsumedToken.getImage());jjtThis.put("isStatic", "false");}
    <WORD> {jjtThis.put("functionName", lastConsumedToken.getImage());}
    <LEFTPARENTHESIS>
    (Arguments)?
    <RIGHTPARENTHESIS>
    <LEFTBRACKET>
    (SCAN 2 VarDeclaration)*
    (Statement)*
    <RETURN>
    Expression #ReturnExpr
    <SEMICOLON>
    <RIGHTBRACKET>
;

Type:
    SCAN 2
    <INT> < LEFTSQUAREBRACKET > < RIGHTSQUAREBRACKET > {jjtThis.put("tipo", "int"); jjtThis.put("isArray", "true");} |
    < BOOLEAN > {jjtThis.put("tipo", lastConsumedToken.getImage()); jjtThis.put("isArray", "false");} |
    < INT > {jjtThis.put("tipo", lastConsumedToken.getImage()); jjtThis.put("isArray", "false");} |
    (< WORD > | <STRING>) {jjtThis.put("tipo", lastConsumedToken.getImage()); jjtThis.put("isArray", "false");}
;
IntArray:
    SCAN 2
    < INT >
    < LEFTSQUAREBRACKET >
    (< INTEGER >)?
    < RIGHTSQUAREBRACKET >
;


Expression #void:
    AndExpression
;

AndExpression #void:
    LessExpression
    (
          ( (<AND> LessExpression) ({jjtThis.put("op", "and");}) #BinOp(2) )
    )*
;

LessExpression #void:
    AdditiveExpression
    (
          ( (<LESS> AdditiveExpression) ({jjtThis.put("op", "less");}) #BinOp(2) )
    )*
;

AdditiveExpression #void:
    MultiplicativeExpression
    (
          ( (<PLUS> MultiplicativeExpression) ({jjtThis.put("op", "add");}) #BinOp(2) ) |
          ( (<MINUS> MultiplicativeExpression) ({jjtThis.put("op", "subtract");}) #BinOp(2) )
    )*
;

MultiplicativeExpression #void:
    NewExpression
    (
         ( (<TIMES> NewExpression) ({jjtThis.put("op", "multiplication");}) #BinOp(2) ) |
         ( (<DIVIDE> NewExpression) ({jjtThis.put("op", "division");}) #BinOp(2) )
    )*
;

NewExpression #void:
    SCAN 2
    (<NEW> <INT> <LEFTSQUAREBRACKET> Negation <RIGHTSQUAREBRACKET> {jjtThis.put("tipo", "int");jjtThis.put("isArray", "true");}) #inttArray|
    <NEW> Negation #NewObject <LEFTPARENTHESIS><RIGHTPARENTHESIS> |
    Negation
;

Negation #void:
    <NOT> Factor |
    Factor
;

Factor #void:
    TerminalExpr
    (AfterFactor)*
;

AfterFactor #void:
    ArrayAccess |
    (SCAN 2 LengthGet | MemberFunction)
;

ArrayAccess #void:
    (<LEFTSQUAREBRACKET> ({jjtThis.put("op", "index"); }) Expression <RIGHTSQUAREBRACKET>) #ArrayAccess(2)
;

LengthGet #void:
    <POINT>(<LENGTH> #Len(2))
;

MemberFunction #FunctionCall(3):
    <POINT>(<WORD> {jjtThis.put("id", lastConsumedToken.getImage());}) #MemberFunc <LEFTPARENTHESIS>
    ((<RIGHTPARENTHESIS> #FuncArgs) |
    ((FuncArguments) <RIGHTPARENTHESIS>))
;

FuncArguments #FuncArgs:
    (Expression
    (<COMMA> Expression)*)
;

TerminalExpr #void:
    SCAN 2
    (<INTEGER> {jjtThis.put("value", lastConsumedToken.getImage());} ) #IntLiteral |
    IntArray |
    (<LEFTPARENTHESIS> AndExpression <RIGHTPARENTHESIS>)  |
    (<MINUS> TerminalExpr) #Negative |
    (<TRUE>  {jjtThis.put("value", "true");} ) #BoolLiteral |
    (<FALSE>  {jjtThis.put("value", "false");} ) #BoolLiteral |
    <THIS> #ThisPointer |
    (<WORD> {jjtThis.put("id", lastConsumedToken.getImage());} ) #Identifier
;

Statement #void:
    (<LEFTBRACKET> (Statement)* <RIGHTBRACKET>) #ScopeStmt |
    IfStatement |
    WhileStatement |
    ExprOrAssignment
;

ExprOrAssignment #void:
    SCAN 2
    Assignment |
    ArrayAssignment |
    (Expression <SEMICOLON>) #ExprStmt
;

Assignment:
    (<WORD> {jjtThis.put("id", lastConsumedToken.getImage());}) #Identifier
    <EQUAL>
    Expression
    <SEMICOLON>
;

ArrayAssignment:
    SCAN 2
    <WORD> {jjtThis.put("id", lastConsumedToken.getImage());}
    <LEFTSQUAREBRACKET>
    Expression #Index
    <RIGHTSQUAREBRACKET>
    <EQUAL>
    Expression
    <SEMICOLON>
;

IfStatement:
    <IF>
    Condition
    Statement #ThenStmt
    <ELSE>
    Statement #ElseStmt
;
Condition:
    <LEFTPARENTHESIS>
    Expression
    <RIGHTPARENTHESIS>
;

WhileStatement:
    <WHILE>
    <LEFTPARENTHESIS>
    Expression #Condition
    <RIGHTPARENTHESIS>
    Statement
;





INJECT BaseNode :
		import pt.up.fe.comp.jmm.ast.JmmNode;
		import pt.up.fe.comp.jmm.ast.AJmmNode;
		import pt.up.fe.specs.util.SpecsCollections;
		extends AJmmNode
{
    @Override
    public List<JmmNode> getChildren() {

        return SpecsCollections.cast(children(), JmmNode.class);
    }

    @Override
    public void add(JmmNode child, int index) {

        if (child instanceof Node) {

            addChild(index, (Node) child);
        } else {

            throw new RuntimeException("Node " + child + " is not a Node.");
        }

    }
}
