PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;

SKIP : " " | "\t" | "\r" | "\n";

TOKEN :
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< OPEN_PAREN : "(" > |
	< CLOSE_PAREN : ")" > |
	< INTEGER : (["0" - "9"])+ > |

    < IMPORT : "import" > |
	< WORD : ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","0"-"9","_"])* > |
	< SEMICOLON : ";" > |
	< COLON : "." > |
	< INT : "int"> |
	<BOOLEAN : "boolean"> |
	<LEFTSQUAREBRACKET : "["> |
    <RIGHTSQUAREBRACKET : "]">
;

Start : VarDeclaration <EOF> ;

AdditiveExpression :
	MultiplicativeExpression
	(
		(< PLUS > | < MINUS >)
		MultiplicativeExpression
	)?
;

MultiplicativeExpression :
	Factor
	(
		(< TIMES > | < DIVIDE >)
		Factor
	)?
;

Factor :
	< INTEGER > |
	< MINUS> Factor |
	< OPEN_PAREN > AdditiveExpression < CLOSE_PAREN >
;




Type:
    (
        < INT > |
        < LEFTSQUAREBRACKET >
        < RIGHTSQUAREBRACKET >
    ) |
    < BOOLEAN > |
    < INT > |
    < WORD >
;

ImportDeclaration:
    (
        < IMPORT >
        < WORD >
        (
          < COLON >
          < WORD>
        )*
        < SEMICOLON >
    )*
;

VarDeclaration :
    Type
    < WORD >
    < SEMICOLON>
;

