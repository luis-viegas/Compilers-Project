PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;

SKIP : " " | "\t" | "\r" | "\n";

TOKEN :
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< EQUAL : "="> |
	< NEGATION : "!"> |
	< INTEGER : (["0" - "9"])+ > |
    <STRING: "string"> |
    <MAIN: "main"> |
    <VOID: "void"> |
    <IF : "if"> |
    <ELSE : "else"> |
    <WHILE : "while"> |
    <STATIC: "static"> |
    <RETURN: "return" > |
    <PUBLIC: "public"> |
    <EXTENDS: "extends"> |
    < LENGTH : "length"> |
    < CLASS: "class" > |
    < IMPORT : "import" > |
    < TRUE : "true"> |
    < FALSE : "false"> |
    < THIS : "this"> |
    < NEW : "new"> |
	< SEMICOLON : ";" > |
	< COLON : "." > |
	< INT : "int"> |
	< BOOLEAN : "boolean"> |
	< LEFTSQUAREBRACKET : "["> |
    < RIGHTSQUAREBRACKET : "]"> |
    < LEFTBRACKET : "{"> |
    < RIGHTBRACKET : "}"> |
    < LEFTPARENTHESIS: "("> |
    < RIGHTPARENTHESIS: ")"> |
    < COMMA: "," > |
    < WORD : ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","0"-"9","_"])* >
;

Start : Program ;

Type:
    (
        < INT > |
        < LEFTSQUAREBRACKET >
        < RIGHTSQUAREBRACKET >
    ) |
    < BOOLEAN > |
    < INT > |
    < WORD >
;

ImportDeclaration:
    (
        < IMPORT >
        < WORD >
        (<COLON> <WORD>)*
        < SEMICOLON >
    )*
;

ClassDeclaration:
    <CLASS>
    <WORD>
    (<EXTENDS> <WORD> )?
    <LEFTBRACKET>
    (VarDeclaration)*
    (MethodDeclaration)*
    <RIGHTBRACKET>
;

VarDeclaration :
    Type
    < WORD >
    < SEMICOLON>
;

MethodDeclaration:
    <PUBLIC>
    NormalFunction |
    MainFunction
;

MainFunction:
    <STATIC><VOID><MAIN>
    <LEFTPARENTHESIS>
    <STRING>
    <LEFTSQUAREBRACKET>
    <RIGHTSQUAREBRACKET>
    <WORD>
    <RIGHTPARENTHESIS>
    <LEFTBRACKET>
    (VarDeclaration)*
    (Statement)*
    <RIGHTBRACKET>
;

NormalFunction:
    Type
    <WORD>
    <LEFTPARENTHESIS>
    (
        Type
        <WORD>
        (
            <COMMA>
            Type
            <WORD>
        )*
    )?
    <RIGHTPARENTHESIS>
    <LEFTBRACKET>
    (VarDeclaration)*
    (Statement)*
    <RETURN>
    Expression
    <SEMICOLON>
    <RIGHTBRACKET>
;

Expression:
    <INTEGER> |
    <TRUE> |
    <FALSE> |
    <THIS> |
    ((<WORD> | <THIS> | (<LEFTPARENTHESIS> Expression <RIGHTPARENTHESIS>)) ExpressionColon) |
    (<NEW> ExpressionNew) |
    (<NEGATION> Expression) |
    (<LEFTPARENTHESIS> Expression <RIGHTPARENTHESIS>) |
    <WORD>
;

ExpressionColon:
        (<COLON> <LENGTH>) |
        (
            <WORD>
            <LEFTPARENTHESIS>
            (
                Expression
                (<COMMA> Expression)*
            )?
            <RIGHTPARENTHESIS>
        )
;

ExpressionNew:
    ( <INT> <LEFTSQUAREBRACKET> Expression <RIGHTSQUAREBRACKET>) |
    (<WORD> <LEFTPARENTHESIS><RIGHTPARENTHESIS>)
;

Statement:
    (
        <WORD>
        (( <EQUAL> Expression) |
        (
            <LEFTSQUAREBRACKET>
            Expression
            <RIGHTSQUAREBRACKET>
            <EQUAL>
            Expression
        ))
        <SEMICOLON>
    ) |
    (<LEFTBRACKET> Statement <RIGHTBRACKET>) |
    IfStatement |
    WhileStatement |
    (Expression <SEMICOLON>)
;

IfStatement:
    <IF>
    <LEFTPARENTHESIS>
    Expression
    <RIGHTPARENTHESIS>
    Statement
    <ELSE>
    Statement
;

WhileStatement:
    <WHILE>
    <LEFTPARENTHESIS>
    Expression
    <RIGHTPARENTHESIS>
    Statement
;

Program:
    ImportDeclaration
    ClassDeclaration
    <EOF> ;